POST /auth/register register a new user
REQUEST BODY
{
  firstName        string  user first name
  lastName         string  user last name
  email            string  email address
  password         string  password must contain only alphanums
  confirmPassword  string  confirm password must match password
  gender           string  male, female, lgbtq
  role             string  client, photographer
  province         string  province
}
RESPONSE
201 { user: {user object without password} }
400 { message: 'error message'}
500 { message: 'internal server error'}

POST /auth/login    login
REQUEST BODY
{
  email           string  email address
  password        string  user password
}
RESPONSE
200 { accessToken: 'user token', user: {user object without password} }
400 { message: 'error message'}
500 { message: 'internal server error'}

GET /auth/me        get authenticated user data
HEADER
  AUTHORIZATION     Bearer [JWT]
RESPONSE
200 { user: {user obj without password} }
401 { message: 'unauthenticated'}
500 { message: 'internal server error'}

POST /works         Create new work
HEADER
  AUTHORIZATION     Bearer [JWT]     
REQUEST BODY        multipart/form-data
  description         String
  firstAvailableDate  Date
  lastAvailableDate   Date
  imageUrl            String (at least one image)  
  imageName           String (at least one image)
RESPONSE
  201 { work: new work object}
  400 { message: 'invalid input'}
  401 { message: 'unauthenticated'}
  403 { message: 'cannot accept your request'}
  500 { message: 'internal server error'}

PATCH /works/:workId/update         update/edit work
HEADER
  AUTHORIZATION              Bearer [JWT]     
REQUEST BODY        multipart/form-data
  description         String
  firstAvailableDate  Date
  lastAvailableDate   Date
  imageUrl            String (at least one image)  
  imageName           String (at least one image)
RESPONSE
  201 { work: new work object}
  400 { message: 'invalid input'}
  401 { message: 'unauthenticated'}
  403 { message: 'cannot accept your request'}
  500 { message: 'internal server error'}

PATCH /works/:workId/delete     delete work
HEADER
  AUTHORIZATION              Bearer [JWT]
RESPONSE
  201 { work: new work object}
  401 { message: 'unauthenticated'}
  403 { message: 'cannot accept your request'}
  500 { message: 'internal server error'}

GET /works          Get all works
RESPONSE
  200 { works: [work object]}
  500 { message: 'internal server error'} 

GET /works/:workId  Get work by work id
RESPONSE
  200 { work: {work object with work req objs & photographer user obj associated with work }}
  500 { message: 'internal server error'} 

GET /works/me       GET works by photographer id
HEADER
  AUTHORIZATION     Bearer [JWT] 
RESPONSE
  200 { works: [work object]}
  401 { message: 'unauthenticated'}
  403 { message: 'cannot accept your request'}
  500 { message: 'internal server error'} 

POST    /requests/works/:workId           send work request
PATCH   /requests/works/:workId/accept    accept work request 
PATCH   /requests/works/:workId/reject    reject work request
PATCH   /requests/works/:workId/cancel    cancel work request
PATCH   /requests/works/:workId/complete  complete work request
HEADER
  AUTHORIZATION     Bearer [JWT]
RESPONSE
  200 { request: {request object}}
  400 { message: 'invalid work status'}
  401 { message: 'unauthenticated'}
  403 { message: 'cannot accept your request'}
  500 { message: 'internal server error'}

GET     /requests/user/:userId     Get requests by user id
HEADER
  AUTHORIZATION     Bearer [JWT]
RESPONSE
  200 { requests: [array of request objs]}
  500 { message: 'internal server error'}


GET     /requests/:requestId   Get request by request id
HEADER
  AUTHORIZATION     Bearer [JWT]
RESPONSE
  200 { request: {request object with client obj & photographer obj}}
  401 { message: 'unauthenticated'}
  500 { message: 'internal server error'}